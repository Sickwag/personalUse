这是一个算法题：
给你一个整数数组 nums 和一个整数 k ，如果 nums 有一个 好的子数组 返回 true ，否则返回 false：

一个 好的子数组 是：

长度 至少为 2 ，且
子数组元素总和为 k 的倍数。
注意：

子数组 是数组中 连续 的部分。
如果存在一个整数 n ，令整数 x 符合 x = n * k ，则称 x 是 k 的一个倍数。0 始终 视为 k 的一个倍数。
 

示例 1：

输入：nums = [23,2,4,6,7], k = 6
输出：true
解释：[2,4] 是一个大小为 2 的子数组，并且和为 6 。
示例 2：

输入：nums = [23,2,6,4,7], k = 6
输出：true
解释：[23, 2, 6, 4, 7] 是大小为 5 的子数组，并且和为 42 。 
42 是 6 的倍数，因为 42 = 7 * 6 且 7 是一个整数。
示例 3：

输入：nums = [23,2,6,4,7], k = 13
输出：false

1 <= nums.length <= 10^5
0 <= nums[i] <= 10^9
0 <= sum(nums[i]) <= 2^31 - 1
1 <= k <= 2^31 - 1
在这个算法题中，可以使用下面的算法解决：（这个算法是正确的并且已经通过了测试集）
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        long long pre_sum = 0;
        unordered_set<int> mapping;
        for (int i = 0;i < n;i++) {
            pre_sum += nums[i];
            int key = pre_sum % k;
            auto it = mapping.find(key);
            if (it != mapping.end()) {
                return true;
            }
            else {
                mapping.insert((pre_sum - nums[i])%k);
            }
        }
        return false;
    }
};
但是如果好的子数组 是长度大于2的数组，是否就能使用mapping.insert((pre_sum - nums[i])%k);这种延迟更新哈希表的思路解决？
如果测试集中的nums数组中含有负数，是否能用这种延迟更新哈希表的思路解决？